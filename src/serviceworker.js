// Import PouchDB
importScripts("https://cdn.jsdelivr.net/npm/pouchdb@7.3.0/dist/pouchdb.min.js");
importScripts("workerhandlers.js");

const remoteCache = new this.PouchDB('remote-cache');
const pendingCache = new this.PouchDB('pending-cache');
remoteCache.info().then(info => console.log(info));
pendingCache.info().then(info => console.log(info));

// Add our custom logic

// Listen to connectivity changes
self.addEventListener('online', (event) => {
    console.log('EVENT ONLINE');
});
self.addEventListener('offline', (event) => {
    console.log('EVENT OFFLINE');
});

// Listen to fetch events on the backend and store the response in the cache
self.addEventListener('fetch', (event) => {
    if (event.request.method == "GET" && event.request.url.indexOf('mockapi.io/forms') > -1) {
        console.log('INTERCEPT GET REQUEST', event.request.url);
        event.respondWith(this.handleGetRequest(event.request));

        // Allows to stop propagation to NGSW to avoid duplicate requests
        event.stopImmediatePropagation();
    } else if (event.request.method == "POST" && event.request.url.indexOf('mockapi.io/forms') > -1) {
        console.log('INTERCEPT POST REQUEST', event.request.url);
        event.respondWith(this.handlePostRequest(event.request));

        // Allows to stop propagation to NGSW to avoid duplicate requests
        event.stopImmediatePropagation();
    }
});

self.addEventListener("offline", (event) => {
    console.log('EVENT OFFLINE');
});

self.addEventListener("online", (event) => {
    console.log('EVENT ONLINE');
});

// Import base service worker (NGSW) generated by Angular CLI
// ! Must be imported last as it can override our listeners
importScripts('./ngsw-worker.js');