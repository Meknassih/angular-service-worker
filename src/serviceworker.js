// Import PouchDB
importScripts("https://cdn.jsdelivr.net/npm/pouchdb@7.3.0/dist/pouchdb.min.js");
importScripts("workerhandlers.js");

let remoteCache = new this.PouchDB('remote-cache');
const pendingCache = new this.PouchDB('pending-cache');
remoteCache.info().then(info => console.log(info));
pendingCache.info().then(info => console.log(info));

// Add our custom logic

// Listen to fetch events on the backend and store the response in the cache
self.addEventListener('fetch', (event) => {
    if (event.request.method == "GET" && event.request.url.indexOf('mockapi.io/forms') > -1) {
        console.log('INTERCEPT GET REQUEST', event.request.url);
        event.respondWith(this.handleGetRequest(event.request));

        // Allows to stop propagation to NGSW to avoid duplicate requests
        event.stopImmediatePropagation();
    } else if (event.request.method == "POST" && event.request.url.indexOf('mockapi.io/forms') > -1) {
        console.log('INTERCEPT POST REQUEST', event.request.url);
        event.respondWith(this.handlePostRequest(event.request));

        // Allows to stop propagation to NGSW to avoid duplicate requests
        event.stopImmediatePropagation();
    }
});

/*  Best practice: use Background Sync (aka Periodic Sync) API of the service worker
    https://developer.mozilla.org/en-US/docs/Web/API/Web_Periodic_Background_Synchronization_API
    https://developer.chrome.com/blog/background-sync/
    We wonâ€™t use it here because it is not standard yet */
const backgroundSyncInterval = setInterval(async () => {
    const pendingCount = (await pendingCache.allDocs()).total_rows;
    if (pendingCount < 1)
        return console.log('LOCAL CACHE CLEAN');

    console.log('LOCAL CACHE NOT CLEAN', pendingCount);
    if (navigator.onLine === false) // Strict equal operator because it can be undefined on some browsers
        return console.log('OFFLINE: SKIPPING SYNC');

    const allDocs = await pendingCache.allDocs({ include_docs: true });
    allDocs.rows.forEach(row => {
        const { _id, _rev, ...doc } = row.doc;
        fetch(`https://60c785ddafc88600179f54d0.mockapi.io/forms`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(doc)
        }).then(response => {
            if (response.status == 200 || response.status == 201) {
                console.log("SUCCESSFULLY SYNCED", doc);
                pendingCache.remove(row.doc._id, row.doc._rev);
            }
        });
    });
}, 1000)

// Import base service worker (NGSW) generated by Angular CLI
// ! Must be imported last as it can override our listeners
importScripts('./ngsw-worker.js');